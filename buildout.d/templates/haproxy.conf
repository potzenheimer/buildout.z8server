global
    # Log to syslog
    log      ${hosts:syslog}:${ports:syslog} local2
    
    # Max connections
    maxconn  ${limits:open-files}
    
    # Number of processes
    nbproc 1

defaults
    # Use HTTP connections
    mode http
    
    # close HTTP keep-alives to make header analysis work across keep-alives
    option httpclose
    
    # Remove requests from the queue if people press stop button
    option abortonclose
    
    # Try to connect this many times on failure
    retries 3
    
    # If a client is bound to a particular backend but it goes down,
    # send them to a different one
    option redispatch
    
    # Expose a URL to make it easier to check if haproxy is up
    monitor-uri /_haproxy_ping_
    
    # Default timeouts
    timeout connect 7s
    timeout queue   300s
    timeout client  300s
    timeout server  300s
    
    # Enable status page at this URL, on the port HAProxy is bound to
    listen stats  ${hosts:haproxy}:${ports:haproxy-stats}
    stats enable
    stats uri /
    stats refresh 5s
    stats realm Haproxy statistics

# Default front-end
frontend loadbalancer
    
    # Bind to the given address
    bind ${hosts:haproxy}:${ports:haproxy}
    
    # Log errors in HTTP logging format
    log    global
    option httplog
    option dontlog-normal
    
    # Access rules

    # Check for hostnames in request
    # acl default_cluster url_sub ${hosts:public}
    # acl ${sites:zope1}_cluster hdr_beg(host) -i ${hosts:zope1}
    acl ${sites:zope1}_cluster url_sub ${hosts:zope1}
    acl ${sites:zope2}_cluster url_sub ${hosts:zope2}
    acl ${sites:zope3}_cluster url_sub ${hosts:zope3}

    # Check that we have at least one node up in each cluster
    acl ${sites:zope1}_cluster_up nbsrv(${sites:zope1}) gt 0
    acl ${sites:zope2}_cluster_up nbsrv(${sites:zope2}) gt 0
    acl ${sites:zope3}_cluster_up nbsrv(${sites:zope3}) gt 0

    # Routing
    use_backend ${sites:zope1} if ${sites:zope1}_cluster_up ${sites:zope1}_cluster
    use_backend ${sites:zope2} if ${sites:zope2}_cluster_up ${sites:zope2}_cluster
    use_backend ${sites:zope3} if ${sites:zope3}_cluster_up ${sites:zope3}_cluster
    
    default_backend panic

# Backend for all nodes.
backend ${sites:zope1}
    
    # Load balance based on number of connections
    balance leastconn
    
    # Record where we've been
    rspadd X-Cluster:\ default
    
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server ${sites:zope1}  ${hosts:main}:${ports:zope1} check rise 1 weight 50 maxconn 4
    
backend ${sites:zope2}
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server ${sites:zope2}  ${hosts:main}:${ports:zope2} check rise 1 weight 50 maxconn 4

backend ${sites:zope3}
    
    # Load balance based on number of connections
    balance leastconn
    # Record where we've been
    rspadd X-Cluster:\ default
    # Note: The maxconn values here match the ZServer thread count. This means requests pile up
    # in HAProxy until Zope's ready, instead of getting stuck in Zope.
    
    server ${sites:zope3}  ${hosts:main}:${ports:zope3} check rise 1 weight 50 maxconn 4


# This is hit only if none of the other clusters are working
backend panic
    
    balance leastconn
    
    # Panic!!!!111eleven!!
    redirect location ${urls:fallback} drop-query
